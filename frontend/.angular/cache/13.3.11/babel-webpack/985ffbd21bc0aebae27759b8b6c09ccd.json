{"ast":null,"code":"import _asyncToGenerator from \"/Users/macx116/Documents/projects/dnguyen/bits/render.com/bits-ai-docs-assist/ai-doc-assist/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../document.service\";\nexport let DocumentAnalysisComponent = /*#__PURE__*/(() => {\n  class DocumentAnalysisComponent {\n    constructor(documentService) {\n      this.documentService = documentService;\n      this.selectedFile = null;\n      this.isAnalyzing = false;\n      this.analysisResult = null;\n      this.analysisProgress = 0;\n      this.errorMessage = '';\n      this.analysisOptions = {\n        generateSummary: true,\n        extractKeywords: true,\n        generateRecommendations: true,\n        performSentimentAnalysis: true,\n        calculateQualityScore: true,\n        detailedMode: false\n      };\n      this.recommendationFilter = 'all'; // all, high, medium, low\n    }\n\n    ngOnInit() {\n      this.loadAnalysisHistory();\n    }\n\n    onFileSelected(event) {\n      const file = event.target.files[0];\n\n      if (file) {\n        if (!this.validateFile(file)) return;\n        this.selectedFile = file;\n        this.errorMessage = '';\n        this.previewFile(file);\n      }\n    }\n\n    validateFile(file) {\n      const maxSize = 10 * 1024 * 1024; // 10MB\n\n      const allowedTypes = ['application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n\n      if (file.size > maxSize) {\n        this.errorMessage = 'Datei zu groß. Maximale Größe: 10MB';\n        return false;\n      }\n\n      if (!allowedTypes.includes(file.type)) {\n        this.errorMessage = 'Dateityp nicht unterstützt. Erlaubt: PDF, TXT, DOC, DOCX';\n        return false;\n      }\n\n      return true;\n    }\n\n    analyzeDocument() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this.selectedFile) return;\n        _this.isAnalyzing = true;\n        _this.analysisProgress = 0;\n        _this.errorMessage = '';\n\n        try {\n          _this.simulateProgress();\n\n          const result = yield _this.documentService.analyzeDocument(_this.selectedFile, _this.analysisOptions); // 🔁 Konvertierung falls Backend Strings liefert\n\n          if (result.keywords && typeof result.keywords === 'string') {\n            result.keywords = result.keywords.split(',').map(k => k.trim());\n          }\n\n          if (result.suggestedComponents && typeof result.suggestedComponents === 'string') {\n            result.suggestedComponents = result.suggestedComponents.split(',').map(c => c.trim());\n          }\n\n          _this.analysisResult = _this.enhanceAnalysisResult(result);\n          _this.analysisProgress = 100;\n\n          _this.saveToHistory(_this.analysisResult);\n        } catch (error) {\n          _this.errorMessage = 'Fehler bei der Analyse: ' + (error.message || 'Unbekannter Fehler');\n          console.error('Analysis error:', error);\n        } finally {\n          _this.isAnalyzing = false;\n        }\n      })();\n    }\n\n    enhanceAnalysisResult(result) {\n      if (result.recommendations) {\n        result.recommendations = this.sortRecommendations(result.recommendations);\n      }\n\n      if (result.keywords) {\n        result.keywordCategories = this.categorizeKeywords(result.keywords);\n      }\n\n      result.qualityIndicators = this.calculateQualityIndicators(result);\n      return result;\n    }\n\n    sortRecommendations(recommendations) {\n      const priorityOrder = {\n        'KRITISCH': 0,\n        'HOCH': 1,\n        'MITTEL': 2,\n        'NIEDRIG': 3\n      };\n      return recommendations.sort((a, b) => (priorityOrder[a.priority] || 999) - (priorityOrder[b.priority] || 999));\n    }\n\n    categorizeKeywords(keywords) {\n      return {\n        technical: keywords.filter(k => this.isTechnicalTerm(k)),\n        business: keywords.filter(k => this.isBusinessTerm(k)),\n        general: keywords.filter(k => !this.isTechnicalTerm(k) && !this.isBusinessTerm(k))\n      };\n    }\n\n    isTechnicalTerm(term) {\n      const techTerms = ['API', 'REST', 'JSON', 'Database', 'Framework', 'Algorithm'];\n      return techTerms.some(t => term.toLowerCase().includes(t.toLowerCase()));\n    }\n\n    isBusinessTerm(term) {\n      const businessTerms = ['ROI', 'KPI', 'Strategy', 'Revenue', 'Customer', 'Market'];\n      return businessTerms.some(t => term.toLowerCase().includes(t.toLowerCase()));\n    }\n\n    calculateQualityIndicators(result) {\n      return {\n        completeness: this.calculateCompleteness(result),\n        clarity: result.readabilityScore || 0,\n        structure: this.calculateStructureScore(result),\n        technicalDepth: this.calculateTechnicalDepth(result)\n      };\n    }\n\n    calculateCompleteness(result) {\n      let score = 0;\n      if (result.summary) score += 25;\n      if (result.keywords && result.keywords.length > 5) score += 25;\n      if (result.recommendations && result.recommendations.length > 0) score += 25;\n      if (result.sentiment) score += 25;\n      return score;\n    }\n\n    calculateStructureScore(result) {\n      let score = 50;\n      if (result.hasHeadings) score += 20;\n      if (result.hasLists) score += 15;\n      if (result.hasCodeBlocks) score += 15;\n      return Math.min(score, 100);\n    }\n\n    calculateTechnicalDepth(result) {\n      if (!result.keywords) return 0;\n      const technicalTerms = result.keywords.filter(k => this.isTechnicalTerm(k));\n      return Math.min(technicalTerms.length / result.keywords.length * 100, 100);\n    }\n\n    simulateProgress() {\n      const interval = setInterval(() => {\n        if (this.analysisProgress < 90) {\n          this.analysisProgress += Math.random() * 15;\n        } else {\n          clearInterval(interval);\n        }\n      }, 500);\n    }\n\n    getFilteredRecommendations() {\n      var _a;\n\n      if (!((_a = this.analysisResult) === null || _a === void 0 ? void 0 : _a.recommendations)) return [];\n\n      if (this.recommendationFilter === 'all') {\n        return this.analysisResult.recommendations;\n      }\n\n      return this.analysisResult.recommendations.filter(r => r.priority.toLowerCase() === this.recommendationFilter);\n    }\n\n    exportResults() {\n      var _a;\n\n      if (!this.analysisResult) return;\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        filename: (_a = this.selectedFile) === null || _a === void 0 ? void 0 : _a.name,\n        analysis: this.analysisResult\n      };\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `analysis_${Date.now()}.json`;\n      link.click();\n    }\n\n    previewFile(file) {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        console.log('File preview:', e.target.result.substring(0, 500));\n      };\n\n      reader.readAsText(file);\n    }\n\n    loadAnalysisHistory() {\n      const history = localStorage.getItem('analysisHistory');\n\n      if (history) {\n        console.log('Loading history:', JSON.parse(history));\n      }\n    }\n\n    saveToHistory(result) {\n      var _a, _b;\n\n      const history = JSON.parse(localStorage.getItem('analysisHistory') || '[]');\n      history.unshift({\n        timestamp: new Date().toISOString(),\n        filename: (_a = this.selectedFile) === null || _a === void 0 ? void 0 : _a.name,\n        summary: ((_b = result.summary) === null || _b === void 0 ? void 0 : _b.substring(0, 100)) + '...'\n      });\n      localStorage.setItem('analysisHistory', JSON.stringify(history.slice(0, 10)));\n    }\n\n    clearAnalysis() {\n      this.analysisResult = null;\n      this.selectedFile = null;\n      this.analysisProgress = 0;\n      this.errorMessage = '';\n    }\n\n  }\n\n  DocumentAnalysisComponent.ɵfac = function DocumentAnalysisComponent_Factory(t) {\n    return new (t || DocumentAnalysisComponent)(i0.ɵɵdirectiveInject(i1.DocumentService));\n  };\n\n  DocumentAnalysisComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DocumentAnalysisComponent,\n    selectors: [[\"app-document-analysis\"]],\n    decls: 1,\n    vars: 0,\n    template: function DocumentAnalysisComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-document-analysis\");\n      }\n    },\n    directives: [DocumentAnalysisComponent],\n    encapsulation: 2\n  });\n  return DocumentAnalysisComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}