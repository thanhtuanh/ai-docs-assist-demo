{"ast":null,"code":"// src/app/document.service.ts\nimport { HttpEventType } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, retry, filter } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl; // z.B. http://localhost:8080/api\n    }\n\n    createDocument(formData) {\n      return this.http.post(`${this.baseUrl}/documents`, formData, {\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(map(event => {\n        if (event.type === HttpEventType.Response) {\n          return event.body;\n        }\n\n        return null;\n      }), filter(response => response !== null), retry(2), catchError(this.handleError));\n    }\n\n    analyzeText(text) {\n      return this.http.post(`${this.baseUrl}/documents/analyze-text`, {\n        text\n      }).pipe(catchError(this.handleError));\n    }\n\n    analyzeDocument(file, options) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('analysisOptions', JSON.stringify(options));\n      return this.http.post(`${this.baseUrl}/documents`, formData, {\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(map(event => {\n        if (event.type === HttpEventType.Response) {\n          return event.body;\n        }\n\n        return null;\n      }), filter(response => response !== null), retry(2), catchError(this.handleError));\n    }\n\n    getDocument(id) {\n      return this.http.get(`${this.baseUrl}/documents/${id}`).pipe(catchError(this.handleError));\n    }\n\n    deleteDocument(id) {\n      return this.http.delete(`${this.baseUrl}/documents/${id}`).pipe(catchError(this.handleError));\n    }\n\n    getDocumentHistory() {\n      return this.http.get(`${this.baseUrl}/documents/history`).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      console.error('API Error:', error);\n      let errorMessage = 'Ein unbekannter Fehler ist aufgetreten';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Client-Fehler: ${error.error.message}`;\n      } else if (error.status) {\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Ungültige Anfrage. Bitte prüfen Sie die Eingaben.';\n            break;\n\n          case 401:\n            errorMessage = 'Nicht autorisiert. Bitte anmelden.';\n            break;\n\n          case 413:\n            errorMessage = 'Datei zu groß.';\n            break;\n\n          case 429:\n            errorMessage = 'Zu viele Anfragen. Bitte später erneut versuchen.';\n            break;\n\n          case 500:\n            errorMessage = 'Serverfehler. Bitte Support kontaktieren.';\n            break;\n\n          default:\n            errorMessage = `Server-Fehler: ${error.status} - ${error.message}`;\n            break;\n        }\n      }\n\n      return throwError(() => new Error(errorMessage));\n    }\n\n  }\n\n  DocumentService.ɵfac = function DocumentService_Factory(t) {\n    return new (t || DocumentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentService,\n    factory: DocumentService.ɵfac,\n    providedIn: 'root'\n  });\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module"}