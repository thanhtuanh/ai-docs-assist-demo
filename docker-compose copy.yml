services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-doc-assist-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-3.5-turbo
      - JAVA_OPTS=-Xmx1024m -Xms512m
      - SERVER_PORT=8080
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_BITS=DEBUG
      # ✅ CORS für Frontend-Container
      - CORS_ALLOWED_ORIGINS=http://localhost:4200,http://frontend:80,http://localhost
    volumes:
      - ./backend/logs:/app/logs
      - backend-data:/app/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-doc-assist-frontend
    ports:
      - "80:80"  # ✅ FIXED: Port 80 für Production
    environment:
      - NODE_ENV=production
      # ✅ Backend URL für Nginx-Proxy
      - BACKEND_URL=http://backend:8080
    depends_on:
      backend:
        condition: service_healthy  # ✅ Warte auf Backend health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  # ✅ OPTIONAL: Reverse Proxy für bessere API-Routing
  # nginx-proxy:
  #   image: nginx:alpine
  #   container_name: ai-doc-assist-proxy
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network

volumes:
  backend-data:
    driver: local

networks:
  app-network:
    name: ai-doc-assist-network
    driver: bridge
