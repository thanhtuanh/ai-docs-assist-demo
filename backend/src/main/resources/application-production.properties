# ========================================
# üåç Frontend-Basis (CORS/Ursprung)
# ========================================
frontend.base.url=${API_FRONTEND_ORIGIN:https://bits-ai-docs-assist-demo.onrender.com}
API_FRONTEND_ORIGIN=${API_FRONTEND_ORIGIN:https://bits-ai-docs-assist-demo.onrender.com}

# ========================================
# üöÄ Server (Render setzt PORT)
# ========================================
server.port=${PORT:8080}
server.servlet.context-path=/

# ========================================
# üîê Security (Hinweis: Flags sind custom)
# ========================================
spring.security.enabled=false
security.csrf.enabled=false
# Falls Security wirklich aus soll: Security-Config mit permitAll() ODER Starter entfernen.

# ========================================
# üóÉÔ∏è Datenbank (Demo/Prod: H2 in-memory)
#    Hinweis: Nicht persistent! F√ºr echtes Prod besser PostgreSQL.
# ========================================
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.h2.console.enabled=false

# ========================================
# üìÅ Datei-Upload
# ========================================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_FILE_SIZE:10MB}

# ========================================
# ü§ñ OpenAI API
#   (beibehaltener Key/Model + Timeout-/Retry-Keys wie vorher)
# ========================================
openai.api.key=${OPENAI_API_KEY:}
openai.api.model=${OPENAI_MODEL:gpt-3.5-turbo}
openai.api.max-tokens=${OPENAI_MAX_TOKENS:500}
openai.api.temperature=${OPENAI_TEMPERATURE:0.3}
openai.api.url=${OPENAI_API_URL:https://api.openai.com/v1/chat/completions}
openai.api.max-retries=3
openai.api.timeout=30
openai.timeout.seconds=60

# ========================================
# üé≠ Demo-Flags
# ========================================
demo.mode=${DEMO_MODE:true}
demo.mock.ai=${DEMO_MOCK_AI:false}

# ========================================
# üåê CORS
# ========================================
cors.allowed.origins=${CORS_ALLOWED_ORIGINS:https://bits-ai-docs-assist-demo.onrender.com,https://bits-ai-docs-assist.onrender.com}
# Optional: Spring Boot CORS (falls genutzt)
spring.web.cors.allowed-origins=${cors.allowed.origins}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# ========================================
# ü©∫ Actuator (ohne Prometheus)
# ========================================
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always
management.endpoint.metrics.enabled=true
management.metrics.export.prometheus.enabled=false

# ========================================
# üí∞ Cache (Caffeine; ben√∂tigt spring-boot-starter-cache + caffeine in POM)
# ========================================
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=1000,expireAfterWrite=1h

# ========================================
# ü™µ Logging
# ========================================
logging.level.com.bits.aidocassist=${LOG_LEVEL:INFO}
logging.level.com.theokanning.openai=${LOG_LEVEL:WARN}
logging.level.org.springframework.web=WARN
logging.level.org.springframework.security=WARN
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
